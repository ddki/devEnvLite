//! `SeaORM` Entity, @generated by sea-orm-codegen 1.1.13

use sea_orm::{entity::prelude::*, ActiveValue::Set};
use serde::{Deserialize, Serialize};

#[derive(Clone, Debug, PartialEq, DeriveEntityModel, Eq, Serialize, Deserialize)]
#[sea_orm(table_name = "environment_variable")]
pub struct Model {
	#[sea_orm(primary_key, auto_increment = false, column_type = "Text")]
	pub id: String,
	#[sea_orm(column_type = "Text", unique)]
	pub key: String,
	#[sea_orm(column_type = "Text")]
	pub value: String,
	#[sea_orm(column_type = "Text", nullable)]
	pub description: Option<String>,
}

#[derive(Copy, Clone, Debug, EnumIter, DeriveRelation)]
pub enum Relation {
	#[sea_orm(has_many = "super::variable_group_mapping::Entity")]
	VariableGroupMapping,
}

impl Related<super::variable_group_mapping::Entity> for Entity {
	fn to() -> RelationDef {
		Relation::VariableGroupMapping.def()
	}
}

impl Related<super::variable_group::Entity> for Entity {
	fn to() -> RelationDef {
		super::variable_group_mapping::Relation::VariableGroup.def()
	}
	fn via() -> Option<RelationDef> {
		Some(
			super::variable_group_mapping::Relation::EnvironmentVariable
				.def()
				.rev(),
		)
	}
}

impl ActiveModelBehavior for ActiveModel {
	fn new() -> Self {
		Self {
			id: Set(ulid::Ulid::new().to_string()),
			..ActiveModelTrait::default()
		}
	}
}
