//! `SeaORM` Entity, @generated by sea-orm-codegen 1.1.13

use sea_orm::entity::prelude::*;
use serde::{Deserialize, Serialize};

#[derive(Clone, Debug, PartialEq, DeriveEntityModel, Eq, Serialize, Deserialize)]
#[sea_orm(table_name = "variable_group")]
pub struct Model {
	#[sea_orm(primary_key, auto_increment = false, column_type = "Text")]
	pub id: String,
	#[sea_orm(column_type = "Text")]
	pub config_id: String,
	#[sea_orm(column_type = "Text", unique)]
	pub name: String,
	#[sea_orm(column_type = "Text", nullable)]
	pub description: Option<String>,
	pub is_active: bool,
	pub sort: Option<i32>,
}

#[derive(Copy, Clone, Debug, EnumIter, DeriveRelation)]
pub enum Relation {
	#[sea_orm(
		belongs_to = "super::env_config::Entity",
		from = "Column::ConfigId",
		to = "super::env_config::Column::Id",
		on_update = "NoAction",
		on_delete = "NoAction"
	)]
	EnvConfig,
	#[sea_orm(has_many = "super::variable_group_mapping::Entity")]
	VariableGroupMapping,
}

impl Related<super::env_config::Entity> for Entity {
	fn to() -> RelationDef {
		Relation::EnvConfig.def()
	}
}

impl Related<super::variable_group_mapping::Entity> for Entity {
	fn to() -> RelationDef {
		Relation::VariableGroupMapping.def()
	}
}

impl Related<super::environment_variable::Entity> for Entity {
	fn to() -> RelationDef {
		super::variable_group_mapping::Relation::EnvironmentVariable.def()
	}
	fn via() -> Option<RelationDef> {
		Some(
			super::variable_group_mapping::Relation::VariableGroup
				.def()
				.rev(),
		)
	}
}

impl ActiveModelBehavior for ActiveModel {}
