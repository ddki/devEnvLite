//! `SeaORM` Entity, @generated by sea-orm-codegen 1.1.13

use sea_orm::entity::prelude::*;
use serde::{Deserialize, Serialize};

#[derive(Clone, Debug, PartialEq, DeriveEntityModel, Eq, Serialize, Deserialize)]
#[sea_orm(table_name = "variable_group_mapping")]
pub struct Model {
	#[sea_orm(primary_key, auto_increment = false, column_type = "Text")]
	pub group_id: String,
	#[sea_orm(primary_key, auto_increment = false, column_type = "Text")]
	pub variable_id: String,
	pub sort: Option<i32>,
}

#[derive(Copy, Clone, Debug, EnumIter, DeriveRelation)]
pub enum Relation {
	#[sea_orm(
		belongs_to = "super::environment_variable::Entity",
		from = "Column::VariableId",
		to = "super::environment_variable::Column::Id",
		on_update = "NoAction",
		on_delete = "NoAction"
	)]
	EnvironmentVariable,
	#[sea_orm(
		belongs_to = "super::variable_group::Entity",
		from = "Column::GroupId",
		to = "super::variable_group::Column::Id",
		on_update = "NoAction",
		on_delete = "NoAction"
	)]
	VariableGroup,
}

impl Related<super::environment_variable::Entity> for Entity {
	fn to() -> RelationDef {
		Relation::EnvironmentVariable.def()
	}
}

impl Related<super::variable_group::Entity> for Entity {
	fn to() -> RelationDef {
		Relation::VariableGroup.def()
	}
}

impl ActiveModelBehavior for ActiveModel {}
